'use strict';

const
  gulp         = require('gulp'),
  sass         = require('gulp-sass'),
  cleanCSS     = require('gulp-clean-css'),
  autoprefixer = require('gulp-autoprefixer'),
  sourcemaps   = require('gulp-sourcemaps'),
  webserver    = require('gulp-webserver'),
  wait         = require('gulp-wait'),
  concat       = require('gulp-concat'),
  uglify       = require('gulp-uglify'),
  babel        = require('gulp-babel'),
  gutil        = require('gulp-util'),
  fs           = require('fs'),
  path		   = require('path'),
  browserify   = require('browserify'),
  source       = require('vinyl-source-stream'),
  buffer       = require('vinyl-buffer'),
  livereload   = require('gulp-livereload'),
  connect      = require('gulp-connect'),
  nunjucks     = require('gulp-nunjucks'),
  nunjRender   = require('gulp-nunjucks-render'),
  moment	   = require('moment'),
  paths        = {
    scripts : [
      // './node_modules/jquery/dist/jquery.min.js',
      './src/js/**/*.js'
    ],
    scss: './src/scss/**/*.scss',
    html: './src/templates/**/*.html'
  };

gulp.task('compile-scss', function() {
  gulp.src('src/scss/style.scss').pipe(wait(100))
    .pipe(sourcemaps.init())
    .pipe(sass().on('error', sass.logError))
    .pipe(autoprefixer({
      browsers: ['last 5 versions'],
      cascade: false
    }))
    // .pipe(cleanCSS({advanced : false}))
    .pipe(sourcemaps.write('.'))
    .pipe(gulp.dest('./public/css/'));
});

gulp.task('watch', function() {
  gulp.watch(paths.scss, ['compile-scss']);
  gulp.watch(paths.scripts, ['compile-js']);
  gulp.watch(paths.html, ['compile-html']);
});

gulp.task('watch-scss', function() {
  gulp.watch(paths.scss, ['compile-scss']);
});

gulp.task('compile-js', function() {
  browserify({
    entries: './src/js/main.js',
    debug: true
  })
    .transform("babelify", {
      presets: ["es2015"]
    })
    .bundle()
    .on('error', gutil.log)
    .pipe(source('bundle.js'))
    .pipe(buffer())
    .pipe(uglify())
    .pipe(gulp.dest(`./public/js/`))
    .pipe(livereload());
});

gulp.task('compile-html', () =>
  gulp.src(paths.html)
    .pipe(nunjRender({
      path: ['./src/templates/'] // String or Array
    }))
    .pipe(nunjucks.compile({name: 'Sindre'}))
    .pipe(gulp.dest('./public/'))
);

gulp.task('webserver', function() {
  gulp.src('./public')
    .pipe(webserver({
      livereload: true,
      fallback: "./index.html",
      port: 1080,
      // open: true
    }));
});

gulp.task('connect', function() {
  connect.server({
    root: './public',
    port: '8000',
    livereload: true
  });
});

gulp.task('generateIndex', function() {
    let now = new Date();
    let html = "<html><head><link rel='stylesheet' href='index.css' /><title>Design Index</title></head><body><h1>Design Index</h1><span class='generated'>Generated by gulp task at " + moment().format("LLL") + "</span><hr /><ul>";
    fs.readdir('./public/', (err, files) => {
        files.forEach(file => {
            if(path.extname(file) === ".html") {
                html += "<li><a href='./" + file + "'>" + file + "</a></li>";
            }
        });
        html += "</ul><hr /><footer>Generation of Index file completed in " + (new Date() - now) + " milliseconds</footer></body></html>";
        fs.writeFile('./public/html/all.html', html, (err) => {
            if(err) throw err;
            console.log('all.html generation complete.');
        });
    });
});

//Watch task
gulp.task('default', ['webserver', 'generateIndex', 'compile-scss', 'compile-html', 'watch'] );
gulp.task('build', ['compile-scss', 'compile-js', 'compile-html'] );